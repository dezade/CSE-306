
PC_InstructionMem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000300  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00000300  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080009c  0080009c  000003d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008eb  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005cf  00000000  00000000  00000d47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000436  00000000  00000000  00001316  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  0000174c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000378  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000477  00000000  00000000  00001af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001f6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 39       	cpi	r26, 0x9C	; 156
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e9       	ldi	r26, 0x9C	; 156
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 39       	cpi	r26, 0x9E	; 158
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/interrupt.h>

volatile unsigned int counter;

int main()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	ec 97       	sbiw	r28, 0x3c	; 60
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	MCUCSR|=(1<<JTD);
  a6:	84 b7       	in	r24, 0x34	; 52
  a8:	80 68       	ori	r24, 0x80	; 128
  aa:	84 bf       	out	0x34, r24	; 52
	MCUCSR|=(1<<JTD);
  ac:	84 b7       	in	r24, 0x34	; 52
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	84 bf       	out	0x34, r24	; 52
	
  DDRD = 0b01000000; // D7 -> clkin D6 ->clkout D5 -> feedback D0 -> ZF
  b2:	80 e4       	ldi	r24, 0x40	; 64
  b4:	81 bb       	out	0x11, r24	; 17
  PORTD = 0x00;
  b6:	12 ba       	out	0x12, r1	; 18
  DDRA = 0xFF; //lower 8 bit output
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8a bb       	out	0x1a, r24	; 26
  DDRB = 0xFF; // higher 8 bit output
  bc:	87 bb       	out	0x17, r24	; 23
  
  DDRC = 0xFF; 
  be:	84 bb       	out	0x14, r24	; 20

  unsigned int instruction[] = {0x8003, 0x8112, 0x8227, 0xE010, 0x1303, 0x4333, 0xD02C, 0x0202, 0x6052, 0x544A, 0xC446, 0x7151, 0xA440, 0xB414, 0x1650, 0xC661, 0x1610, 0xC661, 0x8505, 0x8514, 0x9101, 0x8661, 0x4610, 0x8661, 0x4610, 0x8524, 0x8111, 0xD121, 0xF1A0, 0x850F};
  c0:	8c e3       	ldi	r24, 0x3C	; 60
  c2:	e0 e6       	ldi	r30, 0x60	; 96
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	de 01       	movw	r26, r28
  c8:	11 96       	adiw	r26, 0x01	; 1
  ca:	01 90       	ld	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	8a 95       	dec	r24
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x38>
  //unsigned char clock = PIND & 0x80, ZF = PIND & 0x01;
  
  counter = 0;
  d2:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__data_end+0x1>
  d6:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__data_end>
  
  int length = sizeof(instruction)/sizeof(unsigned int);
  
  while(counter < length)
  da:	fe c0       	rjmp	.+508    	; 0x2d8 <main+0x246>
  {
    //PORTC = 0xFF; 
    //_delay_ms(10);
    while(!(PIND & 0x80));
  dc:	87 9b       	sbis	0x10, 7	; 16
  de:	fe cf       	rjmp	.-4      	; 0xdc <main+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	8f e4       	ldi	r24, 0x4F	; 79
  e2:	93 ec       	ldi	r25, 0xC3	; 195
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x52>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x58>
  ea:	00 00       	nop
    _delay_ms(200);
    unsigned int output = instruction[counter];
  ec:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <__data_end>
  f0:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <__data_end+0x1>
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	a1 e0       	ldi	r26, 0x01	; 1
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	ac 0f       	add	r26, r28
  fe:	bd 1f       	adc	r27, r29
 100:	ea 0f       	add	r30, r26
 102:	fb 1f       	adc	r31, r27
 104:	20 81       	ld	r18, Z
 106:	31 81       	ldd	r19, Z+1	; 0x01
    
    PORTA = (unsigned char)(output & 0x00FF);
 108:	2b bb       	out	0x1b, r18	; 27
    PORTB = (unsigned char)((output & 0xFF00)>>8);
 10a:	38 bb       	out	0x18, r19	; 24
   
    unsigned int opcode = (output & 0xF000)>>12;
 10c:	a9 01       	movw	r20, r18
 10e:	45 2f       	mov	r20, r21
 110:	55 27       	eor	r21, r21
 112:	42 95       	swap	r20
 114:	4f 70       	andi	r20, 0x0F	; 15
    unsigned int jump_address = (output & 0x0FF0)>>4;
 116:	c9 01       	movw	r24, r18
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	9f 70       	andi	r25, 0x0F	; 15
 11c:	bc 01       	movw	r22, r24
 11e:	72 95       	swap	r23
 120:	62 95       	swap	r22
 122:	6f 70       	andi	r22, 0x0F	; 15
 124:	67 27       	eor	r22, r23
 126:	7f 70       	andi	r23, 0x0F	; 15
 128:	67 27       	eor	r22, r23
    unsigned int offset_address = (output & 0x000F);
 12a:	f9 01       	movw	r30, r18
 12c:	ef 70       	andi	r30, 0x0F	; 15
 12e:	ff 27       	eor	r31, r31
    
    counter++;
 130:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
 134:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <__data_end+0x1>
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__data_end+0x1>
 13e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__data_end>
    
    if(opcode == 0x000F) // jump check
 142:	4f 30       	cpi	r20, 0x0F	; 15
 144:	51 05       	cpc	r21, r1
 146:	71 f4       	brne	.+28     	; 0x164 <main+0xd2>
    {  
		PORTD = 0x40; // sending clk
 148:	80 e4       	ldi	r24, 0x40	; 64
 14a:	82 bb       	out	0x12, r24	; 18
 14c:	83 ef       	ldi	r24, 0xF3	; 243
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0xbe>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0xc4>
 156:	00 00       	nop
		_delay_ms(2);
		PORTD = 0x00;
 158:	12 ba       	out	0x12, r1	; 18
      counter = jump_address;
 15a:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <__data_end+0x1>
 15e:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__data_end>
 162:	ba c0       	rjmp	.+372    	; 0x2d8 <main+0x246>
    }
    else if(opcode == 0x000D) //beq check
 164:	4d 30       	cpi	r20, 0x0D	; 13
 166:	51 05       	cpc	r21, r1
 168:	09 f0       	breq	.+2      	; 0x16c <main+0xda>
 16a:	55 c0       	rjmp	.+170    	; 0x216 <main+0x184>
		  else counter += offset_address;
	  }
	  //PORTC = 0x01;
	  */
		unsigned int temp = 0;
		PORTD = 0x40; // sending clk
 16c:	80 e4       	ldi	r24, 0x40	; 64
 16e:	82 bb       	out	0x12, r24	; 18
 170:	a3 ef       	ldi	r26, 0xF3	; 243
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	11 97       	sbiw	r26, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <main+0xe2>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0xe8>
 17a:	00 00       	nop
		_delay_ms(2);
		PORTD = 0x00;
 17c:	12 ba       	out	0x12, r1	; 18
		PORTC = 0x0F;
 17e:	8f e0       	ldi	r24, 0x0F	; 15
 180:	85 bb       	out	0x15, r24	; 21
		  }
		  else counter += offset_address;
	  }
	  //PORTC = 0x01;
	  */
		unsigned int temp = 0;
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
		PORTD = 0x40; // sending clk
		_delay_ms(2);
		PORTD = 0x00;
		PORTC = 0x0F;
		while(!(PIND & 0x20)){temp = PIND;}
 186:	01 c0       	rjmp	.+2      	; 0x18a <main+0xf8>
 188:	80 b3       	in	r24, 0x10	; 16
 18a:	85 9b       	sbis	0x10, 5	; 16
 18c:	fd cf       	rjmp	.-6      	; 0x188 <main+0xf6>
 18e:	a3 ef       	ldi	r26, 0xF3	; 243
 190:	b1 e0       	ldi	r27, 0x01	; 1
 192:	11 97       	sbiw	r26, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x100>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x106>
 198:	00 00       	nop
		_delay_ms(2);
		//if (PIND & 0x01)
		if(temp & 0x01)
 19a:	80 ff       	sbrs	r24, 0
 19c:	39 c0       	rjmp	.+114    	; 0x210 <main+0x17e>
		{
			//PORTC = (unsigned char)offset_address;
			PORTC = 0b10101010;
 19e:	8a ea       	ldi	r24, 0xAA	; 170
 1a0:	85 bb       	out	0x15, r24	; 21
 1a2:	bf e7       	ldi	r27, 0x7F	; 127
 1a4:	4a e1       	ldi	r20, 0x1A	; 26
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	b1 50       	subi	r27, 0x01	; 1
 1aa:	40 40       	sbci	r20, 0x00	; 0
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x116>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x120>
 1b2:	00 00       	nop
			_delay_ms(2000);
			if(offset_address & 0x08)
 1b4:	23 ff       	sbrs	r18, 3
 1b6:	0c c0       	rjmp	.+24     	; 0x1d0 <main+0x13e>
			{
				counter -= (16 - offset_address);
 1b8:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
 1bc:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <__data_end+0x1>
 1c0:	8e 0f       	add	r24, r30
 1c2:	9f 1f       	adc	r25, r31
 1c4:	40 97       	sbiw	r24, 0x10	; 16
 1c6:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__data_end+0x1>
 1ca:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__data_end>
 1ce:	0a c0       	rjmp	.+20     	; 0x1e4 <main+0x152>
			}
			else counter += offset_address;
 1d0:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
 1d4:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <__data_end+0x1>
 1d8:	e8 0f       	add	r30, r24
 1da:	f9 1f       	adc	r31, r25
 1dc:	f0 93 9d 00 	sts	0x009D, r31	; 0x80009d <__data_end+0x1>
 1e0:	e0 93 9c 00 	sts	0x009C, r30	; 0x80009c <__data_end>
			
			if (counter >= length || counter < 0) PORTC = 0x02;_delay_ms(2000);
 1e4:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
 1e8:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <__data_end+0x1>
 1ec:	4e 97       	sbiw	r24, 0x1e	; 30
 1ee:	28 f4       	brcc	.+10     	; 0x1fa <main+0x168>
 1f0:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
 1f4:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <__data_end+0x1>
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <main+0x16c>
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	85 bb       	out	0x15, r24	; 21
 1fe:	9f e7       	ldi	r25, 0x7F	; 127
 200:	aa e1       	ldi	r26, 0x1A	; 26
 202:	b6 e0       	ldi	r27, 0x06	; 6
 204:	91 50       	subi	r25, 0x01	; 1
 206:	a0 40       	sbci	r26, 0x00	; 0
 208:	b0 40       	sbci	r27, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <main+0x172>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <main+0x17c>
 20e:	00 00       	nop
		}
		PORTC = 0x01;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	85 bb       	out	0x15, r24	; 21
 214:	61 c0       	rjmp	.+194    	; 0x2d8 <main+0x246>
    }
    else if(opcode == 0x0006) //bneq check
 216:	46 30       	cpi	r20, 0x06	; 6
 218:	51 05       	cpc	r21, r1
 21a:	09 f0       	breq	.+2      	; 0x21e <main+0x18c>
 21c:	54 c0       	rjmp	.+168    	; 0x2c6 <main+0x234>
    {
		unsigned int temp = 0;
		PORTD = 0x40; // sending clk
 21e:	80 e4       	ldi	r24, 0x40	; 64
 220:	82 bb       	out	0x12, r24	; 18
 222:	83 ef       	ldi	r24, 0xF3	; 243
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <main+0x194>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x19a>
 22c:	00 00       	nop
		_delay_ms(2);
		PORTD = 0x00;
 22e:	12 ba       	out	0x12, r1	; 18
		PORTC = 0x0F;
 230:	8f e0       	ldi	r24, 0x0F	; 15
 232:	85 bb       	out	0x15, r24	; 21
		}
		PORTC = 0x01;
    }
    else if(opcode == 0x0006) //bneq check
    {
		unsigned int temp = 0;
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	90 e0       	ldi	r25, 0x00	; 0
		PORTD = 0x40; // sending clk
		_delay_ms(2);
		PORTD = 0x00;
		PORTC = 0x0F;
      while(!(PIND & 0x20)){temp = PIND;}
 238:	01 c0       	rjmp	.+2      	; 0x23c <main+0x1aa>
 23a:	80 b3       	in	r24, 0x10	; 16
 23c:	85 9b       	sbis	0x10, 5	; 16
 23e:	fd cf       	rjmp	.-6      	; 0x23a <main+0x1a8>
 240:	a3 ef       	ldi	r26, 0xF3	; 243
 242:	b1 e0       	ldi	r27, 0x01	; 1
 244:	11 97       	sbiw	r26, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <main+0x1b2>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x1b8>
 24a:	00 00       	nop
      _delay_ms(2);
      //if (!(PIND & 0x01))
      if(!(temp & 0x01))
 24c:	80 fd       	sbrc	r24, 0
 24e:	38 c0       	rjmp	.+112    	; 0x2c0 <main+0x22e>
      {
		  PORTC = (unsigned char)offset_address;
 250:	e5 bb       	out	0x15, r30	; 21
 252:	bf e7       	ldi	r27, 0x7F	; 127
 254:	4a e1       	ldi	r20, 0x1A	; 26
 256:	86 e0       	ldi	r24, 0x06	; 6
 258:	b1 50       	subi	r27, 0x01	; 1
 25a:	40 40       	sbci	r20, 0x00	; 0
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <main+0x1c6>
 260:	00 c0       	rjmp	.+0      	; 0x262 <main+0x1d0>
 262:	00 00       	nop
		  _delay_ms(2000);
	      if(offset_address & 0x08)
 264:	23 ff       	sbrs	r18, 3
 266:	0c c0       	rjmp	.+24     	; 0x280 <main+0x1ee>
	      {
		      counter -= (16 - offset_address);
 268:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
 26c:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <__data_end+0x1>
 270:	e8 0f       	add	r30, r24
 272:	f9 1f       	adc	r31, r25
 274:	70 97       	sbiw	r30, 0x10	; 16
 276:	f0 93 9d 00 	sts	0x009D, r31	; 0x80009d <__data_end+0x1>
 27a:	e0 93 9c 00 	sts	0x009C, r30	; 0x80009c <__data_end>
 27e:	0a c0       	rjmp	.+20     	; 0x294 <main+0x202>
	      }
	      else counter += offset_address;
 280:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
 284:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <__data_end+0x1>
 288:	e8 0f       	add	r30, r24
 28a:	f9 1f       	adc	r31, r25
 28c:	f0 93 9d 00 	sts	0x009D, r31	; 0x80009d <__data_end+0x1>
 290:	e0 93 9c 00 	sts	0x009C, r30	; 0x80009c <__data_end>
		  
		  if (counter >= length || counter < 0) PORTC = 0x02;_delay_ms(2000);
 294:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
 298:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <__data_end+0x1>
 29c:	4e 97       	sbiw	r24, 0x1e	; 30
 29e:	28 f4       	brcc	.+10     	; 0x2aa <main+0x218>
 2a0:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
 2a4:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <__data_end+0x1>
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <main+0x21c>
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	85 bb       	out	0x15, r24	; 21
 2ae:	9f e7       	ldi	r25, 0x7F	; 127
 2b0:	aa e1       	ldi	r26, 0x1A	; 26
 2b2:	b6 e0       	ldi	r27, 0x06	; 6
 2b4:	91 50       	subi	r25, 0x01	; 1
 2b6:	a0 40       	sbci	r26, 0x00	; 0
 2b8:	b0 40       	sbci	r27, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0x222>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x22c>
 2be:	00 00       	nop
      }
	  PORTC = 0x01;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	85 bb       	out	0x15, r24	; 21
 2c4:	09 c0       	rjmp	.+18     	; 0x2d8 <main+0x246>
    }  
    else{
		PORTD = 0x40; // sending clk
 2c6:	80 e4       	ldi	r24, 0x40	; 64
 2c8:	82 bb       	out	0x12, r24	; 18
 2ca:	83 ef       	ldi	r24, 0xF3	; 243
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <main+0x23c>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0x242>
 2d4:	00 00       	nop
		_delay_ms(2);
		PORTD = 0x00;
 2d6:	12 ba       	out	0x12, r1	; 18
  
  counter = 0;
  
  int length = sizeof(instruction)/sizeof(unsigned int);
  
  while(counter < length)
 2d8:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
 2dc:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <__data_end+0x1>
 2e0:	4e 97       	sbiw	r24, 0x1e	; 30
 2e2:	08 f4       	brcc	.+2      	; 0x2e6 <main+0x254>
 2e4:	fb ce       	rjmp	.-522    	; 0xdc <main+0x4a>
  }
  
  //0x0F;
  //PORTD = 0xf0;

 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	ec 96       	adiw	r28, 0x3c	; 60
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <_exit>:
 2fc:	f8 94       	cli

000002fe <__stop_program>:
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <__stop_program>
