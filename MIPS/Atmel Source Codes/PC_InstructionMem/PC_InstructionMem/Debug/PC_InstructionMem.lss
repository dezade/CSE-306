
PC_InstructionMem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000001c6  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080008a  0080008a  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006b8  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c4  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fb  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000373  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000145  00000000  00000000  0000162f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 38       	cpi	r26, 0x8C	; 140
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/interrupt.h>

volatile unsigned int counter;

int main()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	aa 97       	sbiw	r28, 0x2a	; 42
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  DDRD = 0b01000000; // D7 -> clkin D6 ->clkout D5 -> feedback D0 -> ZF
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	81 bb       	out	0x11, r24	; 17
  PORTD = 0x00;
  aa:	12 ba       	out	0x12, r1	; 18
  DDRA = 0xFF; //lower 8 bit output
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	8a bb       	out	0x1a, r24	; 26
  DDRB = 0xFF; // higher 8 bit output
  b0:	87 bb       	out	0x17, r24	; 23
  
  DDRC = 0xFF; 
  b2:	84 bb       	out	0x14, r24	; 20

  unsigned int instruction[] = {0x8507, 0x8518, 0xC113, 0x5112, 0xA115, 0x9000, 0x1600, 0xC661, 0xE100, 0x0010, 0xD011, 0x8535, 0xD131, 0x8541, 0x6411, 0x8510, 0x8500, 0x1013, 0x4023, 0x8661, 0x4620};
  b4:	8a e2       	ldi	r24, 0x2A	; 42
  b6:	e0 e6       	ldi	r30, 0x60	; 96
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	de 01       	movw	r26, r28
  bc:	11 96       	adiw	r26, 0x01	; 1
  be:	01 90       	ld	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	8a 95       	dec	r24
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x2c>
  //unsigned char clock = PIND & 0x80, ZF = PIND & 0x01;
  
  counter = 0;
  c6:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__data_end+0x1>
  ca:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
  
  int length = sizeof(instruction)/sizeof(unsigned int);
  
  while(counter < length)
  ce:	67 c0       	rjmp	.+206    	; 0x19e <main+0x10c>
  {
    //PORTC = 0xFF; 
    //_delay_ms(10);
    while(!(PIND & 0x80));
  d0:	87 9b       	sbis	0x10, 7	; 16
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <main+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	8f e4       	ldi	r24, 0x4F	; 79
  d6:	93 ec       	ldi	r25, 0xC3	; 195
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x46>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x4c>
  de:	00 00       	nop
    _delay_ms(200);
    unsigned int output = instruction[counter];
  e0:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <__data_end>
  e4:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <__data_end+0x1>
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	8c 0f       	add	r24, r28
  f2:	9d 1f       	adc	r25, r29
  f4:	e8 0f       	add	r30, r24
  f6:	f9 1f       	adc	r31, r25
  f8:	80 81       	ld	r24, Z
  fa:	91 81       	ldd	r25, Z+1	; 0x01
    
    PORTA = (unsigned char)(output & 0x00FF);
  fc:	8b bb       	out	0x1b, r24	; 27
    PORTB = (unsigned char)((output & 0xFF00)>>8);
  fe:	98 bb       	out	0x18, r25	; 24
   
    unsigned int opcode = (output & 0xF000)>>12;
 100:	bc 01       	movw	r22, r24
 102:	67 2f       	mov	r22, r23
 104:	77 27       	eor	r23, r23
 106:	62 95       	swap	r22
 108:	6f 70       	andi	r22, 0x0F	; 15
    unsigned int jump_address = (output & 0x0FF0)>>4;
 10a:	9c 01       	movw	r18, r24
 10c:	20 7f       	andi	r18, 0xF0	; 240
 10e:	3f 70       	andi	r19, 0x0F	; 15
 110:	a9 01       	movw	r20, r18
 112:	52 95       	swap	r21
 114:	42 95       	swap	r20
 116:	4f 70       	andi	r20, 0x0F	; 15
 118:	45 27       	eor	r20, r21
 11a:	5f 70       	andi	r21, 0x0F	; 15
 11c:	45 27       	eor	r20, r21
    unsigned int offset_address = (output & 0x000F);
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	99 27       	eor	r25, r25
    
    counter++;
 122:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <__data_end>
 126:	30 91 8b 00 	lds	r19, 0x008B	; 0x80008b <__data_end+0x1>
 12a:	2f 5f       	subi	r18, 0xFF	; 255
 12c:	3f 4f       	sbci	r19, 0xFF	; 255
 12e:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__data_end+0x1>
 132:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__data_end>
    
    if(opcode == 0x000F) // jump check
 136:	6f 30       	cpi	r22, 0x0F	; 15
 138:	71 05       	cpc	r23, r1
 13a:	29 f4       	brne	.+10     	; 0x146 <main+0xb4>
    {  
      counter = jump_address;
 13c:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__data_end+0x1>
 140:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__data_end>
 144:	23 c0       	rjmp	.+70     	; 0x18c <main+0xfa>
    }
    else if(opcode == 0x000D) //beq check
 146:	6d 30       	cpi	r22, 0x0D	; 13
 148:	71 05       	cpc	r23, r1
 14a:	79 f4       	brne	.+30     	; 0x16a <main+0xd8>
    {  
      while(!(PIND & 0x20));
 14c:	85 9b       	sbis	0x10, 5	; 16
 14e:	fe cf       	rjmp	.-4      	; 0x14c <main+0xba>
      if (PIND & 0x01) counter += offset_address;
 150:	80 9b       	sbis	0x10, 0	; 16
 152:	1c c0       	rjmp	.+56     	; 0x18c <main+0xfa>
 154:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <__data_end>
 158:	30 91 8b 00 	lds	r19, 0x008B	; 0x80008b <__data_end+0x1>
 15c:	82 0f       	add	r24, r18
 15e:	93 1f       	adc	r25, r19
 160:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__data_end+0x1>
 164:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__data_end>
 168:	11 c0       	rjmp	.+34     	; 0x18c <main+0xfa>
    }
    else if(opcode == 0x0006) //bneq check
 16a:	66 30       	cpi	r22, 0x06	; 6
 16c:	71 05       	cpc	r23, r1
 16e:	71 f4       	brne	.+28     	; 0x18c <main+0xfa>
    {
      while(!(PIND & 0x20));
 170:	85 9b       	sbis	0x10, 5	; 16
 172:	fe cf       	rjmp	.-4      	; 0x170 <main+0xde>
      if (!(PIND & 0x01)) counter += offset_address;
 174:	80 99       	sbic	0x10, 0	; 16
 176:	0a c0       	rjmp	.+20     	; 0x18c <main+0xfa>
 178:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <__data_end>
 17c:	30 91 8b 00 	lds	r19, 0x008B	; 0x80008b <__data_end+0x1>
 180:	82 0f       	add	r24, r18
 182:	93 1f       	adc	r25, r19
 184:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__data_end+0x1>
 188:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__data_end>
    }  
    
    PORTD = 0x40; // sending clk
 18c:	80 e4       	ldi	r24, 0x40	; 64
 18e:	82 bb       	out	0x12, r24	; 18
 190:	83 ef       	ldi	r24, 0xF3	; 243
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0x102>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x108>
 19a:	00 00       	nop
    _delay_ms(2);
    PORTD = 0x00;
 19c:	12 ba       	out	0x12, r1	; 18
  
  counter = 0;
  
  int length = sizeof(instruction)/sizeof(unsigned int);
  
  while(counter < length)
 19e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
 1a2:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
 1a6:	45 97       	sbiw	r24, 0x15	; 21
 1a8:	08 f4       	brcc	.+2      	; 0x1ac <main+0x11a>
 1aa:	92 cf       	rjmp	.-220    	; 0xd0 <main+0x3e>
  }
  
  //0x0F;
  //PORTD = 0xf0;

 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	aa 96       	adiw	r28, 0x2a	; 42
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
