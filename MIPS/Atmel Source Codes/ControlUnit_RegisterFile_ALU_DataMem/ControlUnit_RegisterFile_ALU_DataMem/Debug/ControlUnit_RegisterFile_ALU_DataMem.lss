
ControlUnit_RegisterFile_ALU_DataMem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000552  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000584  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076d  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d0  00000000  00000000  00000d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000411  00000000  00000000  0000131d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001730  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000380  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003f3  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001ed7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	8f 00       	.word	0x008f	; ????
  56:	b2 00       	.word	0x00b2	; ????
  58:	d1 00       	.word	0x00d1	; ????
  5a:	f2 00       	.word	0x00f2	; ????
  5c:	13 01       	movw	r2, r6
  5e:	37 01       	movw	r6, r14
  60:	52 01       	movw	r10, r4
  62:	74 01       	movw	r14, r8
  64:	97 01       	movw	r18, r14
  66:	b2 01       	movw	r22, r4
  68:	d6 01       	movw	r26, r12
  6a:	f0 01       	movw	r30, r0
  6c:	13 02       	muls	r17, r19
  6e:	2f 02       	muls	r18, r31
  70:	51 02       	muls	r21, r17

00000072 <__ctors_end>:
  72:	11 24       	eor	r1, r1
  74:	1f be       	out	0x3f, r1	; 63
  76:	cf e5       	ldi	r28, 0x5F	; 95
  78:	d8 e0       	ldi	r29, 0x08	; 8
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	cd bf       	out	0x3d, r28	; 61
  7e:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  82:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <main>:
#define F_CPU 1000000
#include<avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

int main(){
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	cd b7       	in	r28, 0x3d	; 61
  90:	de b7       	in	r29, 0x3e	; 62
  92:	68 97       	sbiw	r28, 0x18	; 24
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	de bf       	out	0x3e, r29	; 62
  9a:	0f be       	out	0x3f, r0	; 63
  9c:	cd bf       	out	0x3d, r28	; 61
	
	MCUCSR|=(1<<JTD);
  9e:	84 b7       	in	r24, 0x34	; 52
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	84 bf       	out	0x34, r24	; 52
	MCUCSR|=(1<<JTD);
  a4:	84 b7       	in	r24, 0x34	; 52
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	84 bf       	out	0x34, r24	; 52

	DDRB = 0x00; // higher 8 bits
  aa:	17 ba       	out	0x17, r1	; 23
	DDRA = 0x00; // lower 8 bits
  ac:	1a ba       	out	0x1a, r1	; 26
	DDRC = 0x0F; // higher 4 bits -> address, lower 4 bits -> data
  ae:	8f e0       	ldi	r24, 0x0F	; 15
  b0:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b1000001; // D0 -> ZF , D7 -> clkout , D1 -> clkin,
  b2:	91 e4       	ldi	r25, 0x41	; 65
  b4:	91 bb       	out	0x11, r25	; 17
	PORTD = 0x00;
  b6:	12 ba       	out	0x12, r1	; 18
	// 0-4 normal
	// 5 zero
	// 6 sp
	unsigned char reg[8]= {0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00};
  b8:	fe 01       	movw	r30, r28
  ba:	31 96       	adiw	r30, 0x01	; 1
  bc:	98 e0       	ldi	r25, 0x08	; 8
  be:	df 01       	movw	r26, r30
  c0:	1d 92       	st	X+, r1
  c2:	9a 95       	dec	r25
  c4:	e9 f7       	brne	.-6      	; 0xc0 <main+0x36>
  c6:	8f 83       	std	Y+7, r24	; 0x07
	unsigned char data[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  c8:	38 96       	adiw	r30, 0x08	; 8
  ca:	80 e1       	ldi	r24, 0x10	; 16
  cc:	df 01       	movw	r26, r30
  ce:	1d 92       	st	X+, r1
  d0:	8a 95       	dec	r24
  d2:	e9 f7       	brne	.-6      	; 0xce <main+0x44>
  d4:	0c c0       	rjmp	.+24     	; 0xee <main+0x64>
	// }

	while(1){
		while(!(PIND & 0x02))
		{
			unsigned char address = (PINC & 0xF0) >> 4;
  d6:	83 b3       	in	r24, 0x13	; 19
  d8:	82 95       	swap	r24
  da:	8f 70       	andi	r24, 0x0F	; 15
			PORTC = reg[address] & 0x0F;
  dc:	e1 e0       	ldi	r30, 0x01	; 1
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	ec 0f       	add	r30, r28
  e2:	fd 1f       	adc	r31, r29
  e4:	e8 0f       	add	r30, r24
  e6:	f1 1d       	adc	r31, r1
  e8:	80 81       	ld	r24, Z
  ea:	8f 70       	andi	r24, 0x0F	; 15
  ec:	85 bb       	out	0x15, r24	; 21
	// {
	//     mask |= (inp[i]<<i);
	// }

	while(1){
		while(!(PIND & 0x02))
  ee:	81 9b       	sbis	0x10, 1	; 16
  f0:	f2 cf       	rjmp	.-28     	; 0xd6 <main+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	83 ef       	ldi	r24, 0xF3	; 243
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x6c>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x72>
  fc:	00 00       	nop
		{
			unsigned char address = (PINC & 0xF0) >> 4;
			PORTC = reg[address] & 0x0F;
		}
		_delay_ms(2);
		unsigned char maskh = PINB;
  fe:	26 b3       	in	r18, 0x16	; 22
		unsigned char maskl = PINA;
 100:	39 b3       	in	r19, 0x19	; 25
		unsigned char opcode = maskh;
		opcode = (opcode >> 4);
 102:	e2 2f       	mov	r30, r18
 104:	e2 95       	swap	r30
 106:	ef 70       	andi	r30, 0x0F	; 15


		switch(opcode){
 108:	8e 2f       	mov	r24, r30
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	8f 30       	cpi	r24, 0x0F	; 15
 10e:	91 05       	cpc	r25, r1
 110:	08 f0       	brcs	.+2      	; 0x114 <main+0x8a>
 112:	e8 c1       	rjmp	.+976    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 114:	fc 01       	movw	r30, r24
 116:	e6 5d       	subi	r30, 0xD6	; 214
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__tablejump2__>
			case 0 :
			{
				// sub
				reg[(maskl & (0x0F))] = - reg[((maskl & 0xF0)>>4)] + reg[(maskh & 0x0F)];
 11e:	43 2f       	mov	r20, r19
 120:	4f 70       	andi	r20, 0x0F	; 15
 122:	2f 70       	andi	r18, 0x0F	; 15
 124:	e1 e0       	ldi	r30, 0x01	; 1
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	ec 0f       	add	r30, r28
 12a:	fd 1f       	adc	r31, r29
 12c:	e2 0f       	add	r30, r18
 12e:	f1 1d       	adc	r31, r1
 130:	90 81       	ld	r25, Z
 132:	e3 2f       	mov	r30, r19
 134:	e2 95       	swap	r30
 136:	ef 70       	andi	r30, 0x0F	; 15
 138:	a1 e0       	ldi	r26, 0x01	; 1
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	ac 0f       	add	r26, r28
 13e:	bd 1f       	adc	r27, r29
 140:	ae 0f       	add	r26, r30
 142:	b1 1d       	adc	r27, r1
 144:	fd 01       	movw	r30, r26
 146:	80 81       	ld	r24, Z
 148:	98 1b       	sub	r25, r24
 14a:	e1 e0       	ldi	r30, 0x01	; 1
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	ec 0f       	add	r30, r28
 150:	fd 1f       	adc	r31, r29
 152:	e4 0f       	add	r30, r20
 154:	f1 1d       	adc	r31, r1
 156:	90 83       	st	Z, r25
				if(reg[(maskl & (0x0F))] == 0 ) PORTD |= 0x01;
 158:	91 11       	cpse	r25, r1
 15a:	c4 c1       	rjmp	.+904    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 15c:	82 b3       	in	r24, 0x12	; 18
 15e:	81 60       	ori	r24, 0x01	; 1
 160:	82 bb       	out	0x12, r24	; 18
 162:	c0 c1       	rjmp	.+896    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
			}
			case 1:
			{
				// sw $t3, 5($t4)
				
				unsigned char src = maskh&0x0F;  //t4
 164:	2f 70       	andi	r18, 0x0F	; 15
				unsigned char dest = maskl>>4;   //t3
 166:	83 2f       	mov	r24, r19
 168:	82 95       	swap	r24
 16a:	8f 70       	andi	r24, 0x0F	; 15
				unsigned char offset = maskl & 0x0F;
 16c:	e3 2f       	mov	r30, r19
 16e:	ef 70       	andi	r30, 0x0F	; 15
				
				data[reg[src]+offset] = reg[dest];
 170:	a1 e0       	ldi	r26, 0x01	; 1
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	ac 0f       	add	r26, r28
 176:	bd 1f       	adc	r27, r29
 178:	a2 0f       	add	r26, r18
 17a:	b1 1d       	adc	r27, r1
 17c:	9c 91       	ld	r25, X
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	e9 0f       	add	r30, r25
 182:	f1 1d       	adc	r31, r1
 184:	a1 e0       	ldi	r26, 0x01	; 1
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	ac 0f       	add	r26, r28
 18a:	bd 1f       	adc	r27, r29
 18c:	a8 0f       	add	r26, r24
 18e:	b1 1d       	adc	r27, r1
 190:	8c 91       	ld	r24, X
 192:	29 e0       	ldi	r18, 0x09	; 9
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	2c 0f       	add	r18, r28
 198:	3d 1f       	adc	r19, r29
 19a:	e2 0f       	add	r30, r18
 19c:	f3 1f       	adc	r31, r19
 19e:	80 83       	st	Z, r24

				break;
 1a0:	a1 c1       	rjmp	.+834    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
			}
			case 2 :
			{
				// sll
				reg[((maskl & 0xF0)>>4)] = reg[(maskh & 0x0F)] << (maskl & 0x0F);
 1a2:	43 2f       	mov	r20, r19
 1a4:	42 95       	swap	r20
 1a6:	4f 70       	andi	r20, 0x0F	; 15
 1a8:	2f 70       	andi	r18, 0x0F	; 15
 1aa:	e1 e0       	ldi	r30, 0x01	; 1
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	ec 0f       	add	r30, r28
 1b0:	fd 1f       	adc	r31, r29
 1b2:	e2 0f       	add	r30, r18
 1b4:	f1 1d       	adc	r31, r1
 1b6:	20 81       	ld	r18, Z
 1b8:	e3 2f       	mov	r30, r19
 1ba:	ef 70       	andi	r30, 0x0F	; 15
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	c9 01       	movw	r24, r18
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <main+0x13c>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	ea 95       	dec	r30
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <main+0x138>
 1ca:	e1 e0       	ldi	r30, 0x01	; 1
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	ec 0f       	add	r30, r28
 1d0:	fd 1f       	adc	r31, r29
 1d2:	e4 0f       	add	r30, r20
 1d4:	f1 1d       	adc	r31, r1
 1d6:	80 83       	st	Z, r24
				if(reg[((maskl & 0xF0)>>4)] == 0 ) PORTD |= 0x01;
 1d8:	81 11       	cpse	r24, r1
 1da:	84 c1       	rjmp	.+776    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 1dc:	82 b3       	in	r24, 0x12	; 18
 1de:	81 60       	ori	r24, 0x01	; 1
 1e0:	82 bb       	out	0x12, r24	; 18
 1e2:	80 c1       	rjmp	.+768    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
				break;
			}
			case 3 :
			{
				// srl
				reg[((maskl & 0xF0)>>4)] = reg[(maskh & 0x0F)] >> (maskl & 0x0F);
 1e4:	43 2f       	mov	r20, r19
 1e6:	42 95       	swap	r20
 1e8:	4f 70       	andi	r20, 0x0F	; 15
 1ea:	2f 70       	andi	r18, 0x0F	; 15
 1ec:	e1 e0       	ldi	r30, 0x01	; 1
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	ec 0f       	add	r30, r28
 1f2:	fd 1f       	adc	r31, r29
 1f4:	e2 0f       	add	r30, r18
 1f6:	f1 1d       	adc	r31, r1
 1f8:	20 81       	ld	r18, Z
 1fa:	e3 2f       	mov	r30, r19
 1fc:	ef 70       	andi	r30, 0x0F	; 15
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	c9 01       	movw	r24, r18
 202:	02 c0       	rjmp	.+4      	; 0x208 <main+0x17e>
 204:	95 95       	asr	r25
 206:	87 95       	ror	r24
 208:	ea 95       	dec	r30
 20a:	e2 f7       	brpl	.-8      	; 0x204 <main+0x17a>
 20c:	e1 e0       	ldi	r30, 0x01	; 1
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	ec 0f       	add	r30, r28
 212:	fd 1f       	adc	r31, r29
 214:	e4 0f       	add	r30, r20
 216:	f1 1d       	adc	r31, r1
 218:	80 83       	st	Z, r24
				if(reg[((maskl & 0xF0)>>4)] == 0 ) PORTD |= 0x01;
 21a:	81 11       	cpse	r24, r1
 21c:	63 c1       	rjmp	.+710    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 21e:	82 b3       	in	r24, 0x12	; 18
 220:	81 60       	ori	r24, 0x01	; 1
 222:	82 bb       	out	0x12, r24	; 18
 224:	5f c1       	rjmp	.+702    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
				break;
			}
			case 4 :
			{
				// lw $t3, 5($t4)
				unsigned char src = maskh&0x0F;  //t4
 226:	2f 70       	andi	r18, 0x0F	; 15
				unsigned char dest = maskl>>4;   //t3
 228:	93 2f       	mov	r25, r19
 22a:	92 95       	swap	r25
 22c:	9f 70       	andi	r25, 0x0F	; 15
				unsigned char offset = maskl & 0x0F;
 22e:	e3 2f       	mov	r30, r19
 230:	ef 70       	andi	r30, 0x0F	; 15
				
				reg[dest]=data[reg[src]+offset] ;
 232:	a1 e0       	ldi	r26, 0x01	; 1
 234:	b0 e0       	ldi	r27, 0x00	; 0
 236:	ac 0f       	add	r26, r28
 238:	bd 1f       	adc	r27, r29
 23a:	a2 0f       	add	r26, r18
 23c:	b1 1d       	adc	r27, r1
 23e:	8c 91       	ld	r24, X
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	e8 0f       	add	r30, r24
 244:	f1 1d       	adc	r31, r1
 246:	49 e0       	ldi	r20, 0x09	; 9
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	4c 0f       	add	r20, r28
 24c:	5d 1f       	adc	r21, r29
 24e:	e4 0f       	add	r30, r20
 250:	f5 1f       	adc	r31, r21
 252:	80 81       	ld	r24, Z
 254:	e1 e0       	ldi	r30, 0x01	; 1
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	ec 0f       	add	r30, r28
 25a:	fd 1f       	adc	r31, r29
 25c:	e9 0f       	add	r30, r25
 25e:	f1 1d       	adc	r31, r1
 260:	80 83       	st	Z, r24
				if(reg[dest] == 0 ) PORTD |= 0x01;
 262:	81 11       	cpse	r24, r1
 264:	3f c1       	rjmp	.+638    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 266:	82 b3       	in	r24, 0x12	; 18
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	82 bb       	out	0x12, r24	; 18
 26c:	3b c1       	rjmp	.+630    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
				break;
			}
			case 5 :
			{
				// ori
				reg[((maskl & 0xF0)>>4)] = reg[(maskh & 0x0F)] | (maskl & 0x0F);
 26e:	43 2f       	mov	r20, r19
 270:	42 95       	swap	r20
 272:	4f 70       	andi	r20, 0x0F	; 15
 274:	2f 70       	andi	r18, 0x0F	; 15
 276:	e1 e0       	ldi	r30, 0x01	; 1
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	ec 0f       	add	r30, r28
 27c:	fd 1f       	adc	r31, r29
 27e:	e2 0f       	add	r30, r18
 280:	f1 1d       	adc	r31, r1
 282:	90 81       	ld	r25, Z
 284:	e3 2f       	mov	r30, r19
 286:	ef 70       	andi	r30, 0x0F	; 15
 288:	e9 2b       	or	r30, r25
 28a:	a1 e0       	ldi	r26, 0x01	; 1
 28c:	b0 e0       	ldi	r27, 0x00	; 0
 28e:	ac 0f       	add	r26, r28
 290:	bd 1f       	adc	r27, r29
 292:	a4 0f       	add	r26, r20
 294:	b1 1d       	adc	r27, r1
 296:	ec 93       	st	X, r30
				if(reg[((maskl & 0xF0)>>4)] == 0 ) PORTD |= 0x01;
 298:	e1 11       	cpse	r30, r1
 29a:	24 c1       	rjmp	.+584    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 29c:	82 b3       	in	r24, 0x12	; 18
 29e:	81 60       	ori	r24, 0x01	; 1
 2a0:	82 bb       	out	0x12, r24	; 18
 2a2:	20 c1       	rjmp	.+576    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
				break;
			}
			case 6 :
			{
				// bneq
				if( reg[(maskh & 0x0F)] - reg[((maskl & 0xF0)>>4)] == 0 ){
 2a4:	2f 70       	andi	r18, 0x0F	; 15
 2a6:	e1 e0       	ldi	r30, 0x01	; 1
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	ec 0f       	add	r30, r28
 2ac:	fd 1f       	adc	r31, r29
 2ae:	e2 0f       	add	r30, r18
 2b0:	f1 1d       	adc	r31, r1
 2b2:	90 81       	ld	r25, Z
 2b4:	e3 2f       	mov	r30, r19
 2b6:	e2 95       	swap	r30
 2b8:	ef 70       	andi	r30, 0x0F	; 15
 2ba:	a1 e0       	ldi	r26, 0x01	; 1
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	ac 0f       	add	r26, r28
 2c0:	bd 1f       	adc	r27, r29
 2c2:	ae 0f       	add	r26, r30
 2c4:	b1 1d       	adc	r27, r1
 2c6:	fd 01       	movw	r30, r26
 2c8:	80 81       	ld	r24, Z
 2ca:	98 13       	cpse	r25, r24
 2cc:	0b c1       	rjmp	.+534    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
					///do something. send 0 flag
					PORTD |= 0x01;
 2ce:	82 b3       	in	r24, 0x12	; 18
 2d0:	81 60       	ori	r24, 0x01	; 1
 2d2:	82 bb       	out	0x12, r24	; 18
 2d4:	bf e3       	ldi	r27, 0x3F	; 63
 2d6:	2d e0       	ldi	r18, 0x0D	; 13
 2d8:	33 e0       	ldi	r19, 0x03	; 3
 2da:	b1 50       	subi	r27, 0x01	; 1
 2dc:	20 40       	sbci	r18, 0x00	; 0
 2de:	30 40       	sbci	r19, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <main+0x250>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0x25a>
 2e4:	00 00       	nop
 2e6:	fe c0       	rjmp	.+508    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
				break;
			}
			case 7 :
			{
				// AND
				reg[(maskl & (0x0F))] = reg[((maskl & 0xF0)>>4)] & reg[(maskh & 0x0F)];
 2e8:	93 2f       	mov	r25, r19
 2ea:	9f 70       	andi	r25, 0x0F	; 15
 2ec:	e3 2f       	mov	r30, r19
 2ee:	e2 95       	swap	r30
 2f0:	ef 70       	andi	r30, 0x0F	; 15
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	4c 0f       	add	r20, r28
 2f8:	5d 1f       	adc	r21, r29
 2fa:	4e 0f       	add	r20, r30
 2fc:	51 1d       	adc	r21, r1
 2fe:	fa 01       	movw	r30, r20
 300:	30 81       	ld	r19, Z
 302:	2f 70       	andi	r18, 0x0F	; 15
 304:	e1 e0       	ldi	r30, 0x01	; 1
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	ec 0f       	add	r30, r28
 30a:	fd 1f       	adc	r31, r29
 30c:	e2 0f       	add	r30, r18
 30e:	f1 1d       	adc	r31, r1
 310:	80 81       	ld	r24, Z
 312:	83 23       	and	r24, r19
 314:	e1 e0       	ldi	r30, 0x01	; 1
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	ec 0f       	add	r30, r28
 31a:	fd 1f       	adc	r31, r29
 31c:	e9 0f       	add	r30, r25
 31e:	f1 1d       	adc	r31, r1
 320:	80 83       	st	Z, r24
				if(reg[(maskl & (0x0F))] == 0 ) PORTD |= 0x01;
 322:	81 11       	cpse	r24, r1
 324:	df c0       	rjmp	.+446    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 326:	82 b3       	in	r24, 0x12	; 18
 328:	81 60       	ori	r24, 0x01	; 1
 32a:	82 bb       	out	0x12, r24	; 18
 32c:	db c0       	rjmp	.+438    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
				break;
			}
			case 8 :
			{
				// addi
				reg[((maskl & 0xF0)>>4)] = reg[(maskh & 0x0F)] + (maskl & 0x0F);
 32e:	43 2f       	mov	r20, r19
 330:	42 95       	swap	r20
 332:	4f 70       	andi	r20, 0x0F	; 15
 334:	2f 70       	andi	r18, 0x0F	; 15
 336:	e1 e0       	ldi	r30, 0x01	; 1
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	ec 0f       	add	r30, r28
 33c:	fd 1f       	adc	r31, r29
 33e:	e2 0f       	add	r30, r18
 340:	f1 1d       	adc	r31, r1
 342:	90 81       	ld	r25, Z
 344:	e3 2f       	mov	r30, r19
 346:	ef 70       	andi	r30, 0x0F	; 15
 348:	e9 0f       	add	r30, r25
 34a:	a1 e0       	ldi	r26, 0x01	; 1
 34c:	b0 e0       	ldi	r27, 0x00	; 0
 34e:	ac 0f       	add	r26, r28
 350:	bd 1f       	adc	r27, r29
 352:	a4 0f       	add	r26, r20
 354:	b1 1d       	adc	r27, r1
 356:	ec 93       	st	X, r30
				if(reg[((maskl & 0xF0)>>4)] == 0 ) PORTD |= 0x01;
 358:	e1 11       	cpse	r30, r1
 35a:	c4 c0       	rjmp	.+392    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 35c:	82 b3       	in	r24, 0x12	; 18
 35e:	81 60       	ori	r24, 0x01	; 1
 360:	82 bb       	out	0x12, r24	; 18
 362:	c0 c0       	rjmp	.+384    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
				break;
			}
			case 9 :
			{
				// NOR
				reg[(maskl & (0x0F))] = ~(reg[((maskl & 0xF0)>>4)] | reg[(maskh & 0x0F)]);
 364:	93 2f       	mov	r25, r19
 366:	9f 70       	andi	r25, 0x0F	; 15
 368:	e3 2f       	mov	r30, r19
 36a:	e2 95       	swap	r30
 36c:	ef 70       	andi	r30, 0x0F	; 15
 36e:	a1 e0       	ldi	r26, 0x01	; 1
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	ac 0f       	add	r26, r28
 374:	bd 1f       	adc	r27, r29
 376:	ae 0f       	add	r26, r30
 378:	b1 1d       	adc	r27, r1
 37a:	fd 01       	movw	r30, r26
 37c:	30 81       	ld	r19, Z
 37e:	2f 70       	andi	r18, 0x0F	; 15
 380:	e1 e0       	ldi	r30, 0x01	; 1
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	ec 0f       	add	r30, r28
 386:	fd 1f       	adc	r31, r29
 388:	e2 0f       	add	r30, r18
 38a:	f1 1d       	adc	r31, r1
 38c:	80 81       	ld	r24, Z
 38e:	83 2b       	or	r24, r19
 390:	80 95       	com	r24
 392:	e1 e0       	ldi	r30, 0x01	; 1
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	ec 0f       	add	r30, r28
 398:	fd 1f       	adc	r31, r29
 39a:	e9 0f       	add	r30, r25
 39c:	f1 1d       	adc	r31, r1
 39e:	80 83       	st	Z, r24
				if(reg[(maskl & (0x0F))] == 0 ) PORTD |= 0x01;
 3a0:	81 11       	cpse	r24, r1
 3a2:	a0 c0       	rjmp	.+320    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 3a4:	82 b3       	in	r24, 0x12	; 18
 3a6:	81 60       	ori	r24, 0x01	; 1
 3a8:	82 bb       	out	0x12, r24	; 18
 3aa:	9c c0       	rjmp	.+312    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
				break;
			}
			case 10 :
			{
				// andi
				reg[((maskl & 0xF0)>>4)] = reg[(maskh & 0x0F)] & (maskl & 0x0F);
 3ac:	83 2f       	mov	r24, r19
 3ae:	82 95       	swap	r24
 3b0:	8f 70       	andi	r24, 0x0F	; 15
 3b2:	2f 70       	andi	r18, 0x0F	; 15
 3b4:	e1 e0       	ldi	r30, 0x01	; 1
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	ec 0f       	add	r30, r28
 3ba:	fd 1f       	adc	r31, r29
 3bc:	e2 0f       	add	r30, r18
 3be:	f1 1d       	adc	r31, r1
 3c0:	e0 81       	ld	r30, Z
 3c2:	e3 23       	and	r30, r19
 3c4:	ef 70       	andi	r30, 0x0F	; 15
 3c6:	a1 e0       	ldi	r26, 0x01	; 1
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	ac 0f       	add	r26, r28
 3cc:	bd 1f       	adc	r27, r29
 3ce:	a8 0f       	add	r26, r24
 3d0:	b1 1d       	adc	r27, r1
 3d2:	ec 93       	st	X, r30
				if(reg[((maskl & 0xF0)>>4)] == 0 ) PORTD |= 0x01;
 3d4:	e1 11       	cpse	r30, r1
 3d6:	86 c0       	rjmp	.+268    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 3d8:	82 b3       	in	r24, 0x12	; 18
 3da:	81 60       	ori	r24, 0x01	; 1
 3dc:	82 bb       	out	0x12, r24	; 18
 3de:	82 c0       	rjmp	.+260    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
				break;
			}
			case 11:
			{
				// OR
				reg[(maskl & (0x0F))] = reg[((maskl & 0xF0)>>4)] | reg[(maskh & 0x0F)];
 3e0:	93 2f       	mov	r25, r19
 3e2:	9f 70       	andi	r25, 0x0F	; 15
 3e4:	e3 2f       	mov	r30, r19
 3e6:	e2 95       	swap	r30
 3e8:	ef 70       	andi	r30, 0x0F	; 15
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	50 e0       	ldi	r21, 0x00	; 0
 3ee:	4c 0f       	add	r20, r28
 3f0:	5d 1f       	adc	r21, r29
 3f2:	4e 0f       	add	r20, r30
 3f4:	51 1d       	adc	r21, r1
 3f6:	fa 01       	movw	r30, r20
 3f8:	30 81       	ld	r19, Z
 3fa:	2f 70       	andi	r18, 0x0F	; 15
 3fc:	e1 e0       	ldi	r30, 0x01	; 1
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	ec 0f       	add	r30, r28
 402:	fd 1f       	adc	r31, r29
 404:	e2 0f       	add	r30, r18
 406:	f1 1d       	adc	r31, r1
 408:	80 81       	ld	r24, Z
 40a:	83 2b       	or	r24, r19
 40c:	e1 e0       	ldi	r30, 0x01	; 1
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	ec 0f       	add	r30, r28
 412:	fd 1f       	adc	r31, r29
 414:	e9 0f       	add	r30, r25
 416:	f1 1d       	adc	r31, r1
 418:	80 83       	st	Z, r24
				if(reg[(maskl & (0x0F))] == 0 ) PORTD |= 0x01;
 41a:	81 11       	cpse	r24, r1
 41c:	63 c0       	rjmp	.+198    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 41e:	82 b3       	in	r24, 0x12	; 18
 420:	81 60       	ori	r24, 0x01	; 1
 422:	82 bb       	out	0x12, r24	; 18
 424:	5f c0       	rjmp	.+190    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
				break;
			}
			case 12 :
			{
				// subi
				reg[((maskl & 0xF0)>>4)] = reg[(maskh & 0x0F)] - (maskl & 0x0F);
 426:	43 2f       	mov	r20, r19
 428:	42 95       	swap	r20
 42a:	4f 70       	andi	r20, 0x0F	; 15
 42c:	2f 70       	andi	r18, 0x0F	; 15
 42e:	e1 e0       	ldi	r30, 0x01	; 1
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	ec 0f       	add	r30, r28
 434:	fd 1f       	adc	r31, r29
 436:	e2 0f       	add	r30, r18
 438:	f1 1d       	adc	r31, r1
 43a:	90 81       	ld	r25, Z
 43c:	e3 2f       	mov	r30, r19
 43e:	ef 70       	andi	r30, 0x0F	; 15
 440:	89 2f       	mov	r24, r25
 442:	8e 1b       	sub	r24, r30
 444:	e1 e0       	ldi	r30, 0x01	; 1
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	ec 0f       	add	r30, r28
 44a:	fd 1f       	adc	r31, r29
 44c:	e4 0f       	add	r30, r20
 44e:	f1 1d       	adc	r31, r1
 450:	80 83       	st	Z, r24
				if(reg[((maskl & 0xF0)>>4)] == 0 ) PORTD |= 0x01;
 452:	81 11       	cpse	r24, r1
 454:	47 c0       	rjmp	.+142    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 456:	82 b3       	in	r24, 0x12	; 18
 458:	81 60       	ori	r24, 0x01	; 1
 45a:	82 bb       	out	0x12, r24	; 18
 45c:	43 c0       	rjmp	.+134    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
				break;
			}
			case 13 :
			{
				// beq
				if( reg[(maskh & 0x0F)] - reg[((maskl & 0xF0)>>4)] == 0 ){
 45e:	2f 70       	andi	r18, 0x0F	; 15
 460:	e1 e0       	ldi	r30, 0x01	; 1
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	ec 0f       	add	r30, r28
 466:	fd 1f       	adc	r31, r29
 468:	e2 0f       	add	r30, r18
 46a:	f1 1d       	adc	r31, r1
 46c:	90 81       	ld	r25, Z
 46e:	e3 2f       	mov	r30, r19
 470:	e2 95       	swap	r30
 472:	ef 70       	andi	r30, 0x0F	; 15
 474:	a1 e0       	ldi	r26, 0x01	; 1
 476:	b0 e0       	ldi	r27, 0x00	; 0
 478:	ac 0f       	add	r26, r28
 47a:	bd 1f       	adc	r27, r29
 47c:	ae 0f       	add	r26, r30
 47e:	b1 1d       	adc	r27, r1
 480:	fd 01       	movw	r30, r26
 482:	80 81       	ld	r24, Z
 484:	98 13       	cpse	r25, r24
 486:	2e c0       	rjmp	.+92     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
					///do something. send 0 flag
					PORTD |= 0x01;
 488:	82 b3       	in	r24, 0x12	; 18
 48a:	81 60       	ori	r24, 0x01	; 1
 48c:	82 bb       	out	0x12, r24	; 18
 48e:	bf e3       	ldi	r27, 0x3F	; 63
 490:	2d e0       	ldi	r18, 0x0D	; 13
 492:	33 e0       	ldi	r19, 0x03	; 3
 494:	b1 50       	subi	r27, 0x01	; 1
 496:	20 40       	sbci	r18, 0x00	; 0
 498:	30 40       	sbci	r19, 0x00	; 0
 49a:	e1 f7       	brne	.-8      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49e:	00 00       	nop
 4a0:	21 c0       	rjmp	.+66     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
				break;
			}
			case 14 :
			{
				// add
				reg[(maskl & (0x0F))] = reg[((maskl & 0xF0)>>4)] + reg[(maskh & 0x0F)];
 4a2:	93 2f       	mov	r25, r19
 4a4:	9f 70       	andi	r25, 0x0F	; 15
 4a6:	83 2f       	mov	r24, r19
 4a8:	82 95       	swap	r24
 4aa:	8f 70       	andi	r24, 0x0F	; 15
 4ac:	e1 e0       	ldi	r30, 0x01	; 1
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	ec 0f       	add	r30, r28
 4b2:	fd 1f       	adc	r31, r29
 4b4:	e8 0f       	add	r30, r24
 4b6:	f1 1d       	adc	r31, r1
 4b8:	30 81       	ld	r19, Z
 4ba:	2f 70       	andi	r18, 0x0F	; 15
 4bc:	e1 e0       	ldi	r30, 0x01	; 1
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	ec 0f       	add	r30, r28
 4c2:	fd 1f       	adc	r31, r29
 4c4:	e2 0f       	add	r30, r18
 4c6:	f1 1d       	adc	r31, r1
 4c8:	80 81       	ld	r24, Z
 4ca:	83 0f       	add	r24, r19
 4cc:	e1 e0       	ldi	r30, 0x01	; 1
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	ec 0f       	add	r30, r28
 4d2:	fd 1f       	adc	r31, r29
 4d4:	e9 0f       	add	r30, r25
 4d6:	f1 1d       	adc	r31, r1
 4d8:	80 83       	st	Z, r24
				if(reg[(maskl & (0x0F))] == 0 ) PORTD |= 0x01;
 4da:	81 11       	cpse	r24, r1
 4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4de:	82 b3       	in	r24, 0x12	; 18
 4e0:	81 60       	ori	r24, 0x01	; 1
 4e2:	82 bb       	out	0x12, r24	; 18
			default :
			{
				break;
			}
		}
		PORTD |= 0b10000000;
 4e4:	82 b3       	in	r24, 0x12	; 18
 4e6:	80 68       	ori	r24, 0x80	; 128
 4e8:	82 bb       	out	0x12, r24	; 18
		//_delay_ms(2);
		PORTD = 0x00;
 4ea:	12 ba       	out	0x12, r1	; 18
	}
 4ec:	00 ce       	rjmp	.-1024   	; 0xee <main+0x64>

000004ee <__tablejump2__>:
 4ee:	ee 0f       	add	r30, r30
 4f0:	ff 1f       	adc	r31, r31
 4f2:	05 90       	lpm	r0, Z+
 4f4:	f4 91       	lpm	r31, Z
 4f6:	e0 2d       	mov	r30, r0
 4f8:	09 94       	ijmp

000004fa <_exit>:
 4fa:	f8 94       	cli

000004fc <__stop_program>:
 4fc:	ff cf       	rjmp	.-2      	; 0x4fc <__stop_program>
